import sys
import tensorflow as tf
import numpy as np
import math

ITERATIONS = 20
INPUT_SIZE = 3
LABEL_CLASS_SIZE = 2
NN_MODEL_STATE_FILE = '/tmp/model_1.ckpt'
LAYER_SIZE = 3

LOGDIR = "/home/tharanga/tensorflow_logs"

def model(train, batch_x=None, batch_y=None):

    layer_input_size = INPUT_SIZE * INPUT_SIZE * LAYER_SIZE

    with tf.name_scope("input"):
        x = tf.placeholder(tf.float32, [None, INPUT_SIZE, INPUT_SIZE, LAYER_SIZE])
        tf.summary.image('input_images', tf.reshape(x, [-1, INPUT_SIZE, INPUT_SIZE, LAYER_SIZE]), 50)

    xx = tf.reshape(x, (-1, layer_input_size))

    _y = tf.placeholder(tf.float32, [None, LABEL_CLASS_SIZE])
    step = tf.placeholder(tf.int32)

    w = tf.Variable(tf.truncated_normal([layer_input_size, LABEL_CLASS_SIZE], stddev=0.1))
    b = tf.Variable(tf.ones([LABEL_CLASS_SIZE]) / 10)

    y_logits = tf.matmul(xx, w) + b
    y = tf.nn.softmax(y_logits)

    cross_entropy = tf.nn.softmax_cross_entropy_with_logits(logits=y_logits, labels=_y)
    cross_entropy = tf.reduce_mean(cross_entropy) * 100

    correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(_y, 1))

    with tf.name_scope("accuracy"):
        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
        tf.summary.scalar("accuracy", accuracy)

    lr = 0.0001 + tf.train.exponential_decay(0.003, step, 2000, 1 / math.e)
    train_step = tf.train.AdamOptimizer(lr).minimize(cross_entropy)

    summ = tf.summary.merge_all()

    init = tf.global_variables_initializer()
    saver = tf.train.Saver()
    sess = tf.Session()
    sess.run(init)

    writer = tf.summary.FileWriter(LOGDIR)
    writer.add_graph(sess.graph)

    if train:

        for i in range(0, ITERATIONS):
            a, c, l, s = sess.run([accuracy, cross_entropy, lr, summ],
                               feed_dict={
                                   x: batch_x,
                                   _y: batch_y,
                                   step: i
                               })
            print "[ %r ] accuracy: %r, loss: %r, learning-rate: %r" % (i, a, c, l)
            writer.add_summary(s, i)

            # the backpropagation training step
            sess.run(train_step, {x: batch_x, _y: batch_y, step: i})

        saver.save(sess, NN_MODEL_STATE_FILE)

    else:
        saver.restore(sess, NN_MODEL_STATE_FILE)

        w_result, b_result, y_result, accuracy_result = sess.run([w, b, y, accuracy], feed_dict={x: batch_x, _y: batch_y})
        print "w", w_result
        print "b", b_result
        print "y", y_result
        print "accuracy_result", accuracy_result

        for r in y_result:
            print "---------"
            print "class-0", r[0]
            print "class-1", r[1]
            print "predict sum", np.sum(r)

            if r[0] > r[1]:
                print "class", "X"
            else:
                print "class", "Y"

            print "---------"


def get_data():
    x1 = [
        [[1, 2, 0], [0, 0, 0], [1, 2, 0]],
        [[0, 0, 0], [1, 2, 0], [0, 0, 0]],
        [[1, 2, 0], [0, 0, 0], [1, 2, 0]],
    ]

    x2 = [
        [[1, 2, 0], [0, 0, 0], [1, 2, 0]],
        [[0, 0, 0], [1, 2, 0], [0, 0, 0]],
        [[1, 2, 0], [0, 0, 0], [1, 2, 0]],
    ]

    y1 = [
        [[10, 4, 0], [0, 0, 0], [10, 4, 0]],
        [[0, 0, 0], [10, 4, 0], [0, 0, 0]],
        [[10, 4, 0], [0, 0, 0], [10, 4, 0]],
    ]

    y2 = [
        [[10, 4, 0], [0, 0, 0], [10, 4, 0]],
        [[0, 0, 0], [10, 4, 0], [0, 0, 0]],
        [[10, 4, 0], [10, 0, 0], [10, 4, 0]],
    ]

    batch_x = [x1, x2, y1, y2]
    batch_y = onehot_encode([0, 0, 1, 1])

    return batch_x, batch_y


def onehot_encode(labels):
    labels_np = np.array(labels).astype(dtype=np.uint8)
    return (np.arange(LABEL_CLASS_SIZE) == labels_np[:, None]).astype(np.float32)


is_train = int(sys.argv[1])
print "is_train", is_train
if is_train == 1:
    print "training"
    b_x, b_y = get_data()
    print "b_x shape", np.array(b_x).shape
    print "b_y shape", np.array(b_y).shape
    model(True, b_x, b_y)
else:
    print "testing"
    b_x, b_y = get_data()
    model(False, b_x, b_y)
