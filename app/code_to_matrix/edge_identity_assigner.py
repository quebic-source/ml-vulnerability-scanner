import pickle
import os

EDGE_TYPES_MAP_FILE = '.edge_types_map'
EDGE_TYPES_MAP_KEY = 'edge_types_map'


# EdgeIdentityAssigner
# assign ids into edge-types
# keep edge_type:id map -> __edge_map
class EdgeIdentityAssigner:
    def __init__(self):
        self.__edge_types_map = {}
        self.__load_from_disk()

    # if edge_type is not exists in node_types_map save it, then return id of the give edge_type
    # otherwise only return id of the give edge_type
    def save_and_get_edge(self, edge_type):

        if self.__get_id_by_edge_type(edge_type) is None:
            self.__edge_types_map[edge_type] = len(self.__edge_types_map) + 2
            self.__save_to_disk()

        return self.__get_id_by_edge_type(edge_type)

    def __get_id_by_edge_type(self, edge_type):
        try:
            return self.__edge_types_map[edge_type]
        except KeyError:
            return None

    def get_edge_types_map(self):
        return self.__edge_types_map

    def __save_to_disk(self):
        f = open(EDGE_TYPES_MAP_FILE,'wb')
        pickle.dump(
            {
                EDGE_TYPES_MAP_KEY: self.__edge_types_map
            },
            f
        )
        f.close()

    def __load_from_disk(self):
        if os.path.exists(EDGE_TYPES_MAP_FILE) is False:
            return

        f = open(EDGE_TYPES_MAP_FILE, 'r')
        obj = pickle.load(f)

        try:
            self.__edge_types_map = obj[EDGE_TYPES_MAP_KEY]
        except KeyError:
            pass

        f.close()