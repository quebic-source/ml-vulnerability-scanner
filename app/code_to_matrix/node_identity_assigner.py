import pickle
import os

NODE_TYPES_MAP_FILE = '.node_types_map'
NODE_TYPES_MAP_KEY = 'node_types_map'


# NodeIdentityAssigner
# assign ids into node-types
# keep node_type:id map -> __nodes_map
class NodeIdentityAssigner:
    def __init__(self):
        self.__node_types_map = {}
        self.__load_from_disk()

    # if node_type is not exists in node_types_map save it, then return id of the give node_type
    # otherwise only return id of the give node_type
    def save_and_get_node(self, node_type):

        if self.__get_id_by_node_type(node_type) is None:
            self.__node_types_map[node_type] = len(self.__node_types_map) + 2
            self.__save_to_disk()

        return self.__get_id_by_node_type(node_type)

    def __get_id_by_node_type(self, node_type):
        try:
            return self.__node_types_map[node_type]
        except KeyError:
            return None

    def get_node_types_map(self):
        return self.__node_types_map

    def __save_to_disk(self):
        f = open(NODE_TYPES_MAP_FILE,'wb')
        pickle.dump(
            {
                NODE_TYPES_MAP_KEY: self.__node_types_map
            },
            f
        )
        f.close()

    def __load_from_disk(self):
        if os.path.exists(NODE_TYPES_MAP_FILE) is False:
            return

        f = open(NODE_TYPES_MAP_FILE, 'r')
        obj = pickle.load(f)

        try:
            self.__node_types_map = obj[NODE_TYPES_MAP_KEY]
        except KeyError:
            pass

        f.close()