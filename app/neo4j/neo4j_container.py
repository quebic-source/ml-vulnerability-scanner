import docker
import requests
import time
from common.logger_util import get_logger

CONTAINER_NAME = 'neo4j'


# Neo4J Docker Container
class Neo4JContainer:

    def __init__(self, neo4j_config):
        self.__logger = get_logger(__name__)
        self.neo4j_config = neo4j_config
        self.client = docker.from_env()

    # run neo4j docker container
    # stop existing container if running and run new container
    def run(self):
        self.__stop()

        config_location = self.neo4j_config.config_location
        data_location = self.neo4j_config.data_location

        try:
            self.client.containers.run(
                image='neo4j:2.3',
                name=CONTAINER_NAME,
                mounts=[
                    {'target': '/conf', 'source': config_location, 'type': 'bind'},
                    {'target': '/data', 'source': data_location, 'type': 'bind'}
                ],
                ports={'7474/tcp': 7474, '7687/tcp': 7687},
                detach=True,
            )
            self.__wait_for_server_start()
        except Exception as e:
            raise Exception("neo4j docker container start failed, cause : %r" % e.message)

    def __stop(self):
        try:
            container = self.client.containers.get(CONTAINER_NAME)
            container.remove(force=True)
        except Exception:
            pass

    def __wait_for_server_start(self):
        while True:

            try:
                response = requests.get('http://' + self.neo4j_config.server)
                if response.status_code == 200:
                    break
            except Exception:
                pass

            time.sleep(1)
