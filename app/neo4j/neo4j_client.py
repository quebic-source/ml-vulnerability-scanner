import requests
from requests.auth import HTTPBasicAuth

BASE_PATH = '/db/data/transaction'

MATRIX_QUERY = """ 
            MATCH (n)
            WITH collect(n) AS Nodes
            WITH [n IN Nodes |
                    [m IN Nodes |
                        CASE size((n)-->(m))
                            WHEN 0 THEN 0
                            ELSE n.type + ':' + TYPE(RELATIONSHIPS((n)-->(m)[0])[0])  +  ':' + m.type
                        END
                    ]
            ] AS AdjacencyMatrix
            RETURN AdjacencyMatrix;
"""


class Neo4JClient:
    def __init__(self, neo4j_config):
        self.neo4j_config = neo4j_config

    def execute_matrix_query(self):
        commit_endpoint = self.__open_transaction()
        return self.__commit_transaction(commit_endpoint, MATRIX_QUERY)

    def __open_transaction(self):

        try:

            response = requests.post(self.__get_url(), auth=self.__get_auth_ctx())
            if response.status_code != 201:
                raise Exception("open_transaction failed, status : %r , cause : %r" % (response.status_code, response.text))
            return response.json()['commit']

        except Exception as e:
            raise Exception("open_transaction failed, status : %r , cause : %r" % (500, e.message))

    def __commit_transaction(self, commit_endpoint, cypher_query):

        try:

            payload = {
                'statements': [
                    {
                        "statement": cypher_query,
                        "resultDataContents": [
                            "row",
                            "graph"
                        ],
                        "includeStats": True
                    }
                ]
            }

            response = requests.post(commit_endpoint, auth=self.__get_auth_ctx(), json=payload)
            if response.status_code != 200:
                raise Exception("commit_transaction failed, status : %r , cause : %r" % (response.status_code, response.text))

            response = response.json()
            if len(response['errors']) != 0:
                raise Exception("commit_transaction failed, cause : %r" % response['errors'])

            if (len(response['results']) == 0) | \
                    (len(response["results"][0]["data"]) == 0) | \
                    (len(response["results"][0]["data"][0]["row"]) == 0):
                raise Exception("commit_transaction result is empty")

            return response["results"][0]["data"][0]["row"][0]

        except Exception as e:
            raise Exception("commit_transaction failed, status : %r , cause : %r" % (500, e.message))

    def __get_url(self):
        return 'http://' + self.neo4j_config.server + BASE_PATH

    def __get_auth_ctx(self):
        return HTTPBasicAuth(self.neo4j_config.username, self.neo4j_config.password)
