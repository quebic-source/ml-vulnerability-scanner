import os
import numpy as np


# get dirs inside root_dir
def listdir(root_dir):

    if os.path.exists(root_dir) is False:
        raise Exception("%s is not exists" % root_dir)

    if os.path.isdir(root_dir) is False:
        raise Exception("%s is not a dir" % root_dir)

    dirs = []
    for app_dir in os.listdir(root_dir):
        dirs.append([app_dir, os.path.join(root_dir, app_dir)])

    return dirs


def process_data(ctm, apps_location, label_class_size):
    try:
        x = []
        labels = []

        for lbl_class_dir in listdir(apps_location):

            # lbl_class_dir name. this will be 0, 1, 2
            lbl_index = get_lbl_index(lbl_class_dir[0])
            if lbl_index is False:
                continue

            if lbl_index >= label_class_size:
                print "found invalid label dir : %s. label index should be less than label_class_size" % lbl_index
                continue

            lbl_class_dir_path = lbl_class_dir[1]
            for app_dir in listdir(lbl_class_dir_path):
                app_dir_path = app_dir[1]
                code_matrix = ctm.convert(app_dir_path)
                x.append(code_matrix)
                labels.append(lbl_index)

        y = onehot_encode(labels, label_class_size)
        return x, y
    except Exception as e:
        raise Exception("process-data failed, cause : %r" % e.message)


def onehot_encode(labels, label_class_size):
    labels_np = np.array(labels).astype(dtype=np.uint8)
    return (np.arange(label_class_size) == labels_np[:, None]).astype(np.float32)


def get_lbl_index(lbl_dir_name):
    try:
        return int(lbl_dir_name)
    except Exception:
        print "found invalid label dir : %s. label dir name must be an integer" % lbl_dir_name
        return False
