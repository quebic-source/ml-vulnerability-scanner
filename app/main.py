import argparse
from config.app_config import ConfigLoader
from code_to_matrix.code_to_matrix_converter import CodeToMatrixConverter
from neural_network.trainer import Trainer
from neural_network.tester import Tester
from neural_network.predictor import Predictor
from neural_network.nn_model import NeuralNetworkModel


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='ai-code scanner')
    parser.add_argument(
        '--training',
        action="store_true",
        dest="training",
        default=False,
        help="training"
    )

    parser.add_argument(
        '--testing',
        action="store_true",
        dest="testing",
        default=False,
        help="testing"
    )

    parser.add_argument(
        '--predict',
        action="store_true",
        dest="predict",
        default=False,
        help="predict"
    )

    config = ConfigLoader.load()

    nn = NeuralNetworkModel(nn_config=config.nn_config)

    ctm = CodeToMatrixConverter(
        neo4j_config=config.neo4j_config,
        joern_config=config.joern_config,
        nn_input_size=config.nn_config.input_size
    )

    args = parser.parse_args()
    if args.training:
        try:
            trainer = Trainer(
                trainer_config=config.trainer_config,
                ctm=ctm,
                nn_model=nn,
                label_class_size=config.nn_config.label_class_size
            )
            trainer.train()
        except Exception as e:
            print "train failed : %r" % e.message

    elif args.testing:

        try:
            tester = Tester(
                tester_config=config.tester_config,
                ctm=ctm,
                nn_model=nn,
                label_class_size=config.nn_config.label_class_size
            )
            tester.test()
        except Exception as e:
            print "test failed : %r" % e.message

    elif args.predict:

        try:
            predictor = Predictor(
                predictor_config=config.predictor_config,
                ctm=ctm,
                nn_model=nn
            )
            predictor.predict()
        except Exception as e:
            print "predict failed : %r" % e.message

    else:
        print "command not found"
